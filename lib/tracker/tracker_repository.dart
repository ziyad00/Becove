import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:tracker/common/repository.dart';
import 'package:tracker/tracker/models/timer.dart';

import '../common/abstractModel.dart';

class TrackerRepository {
  final collectionName = "timers";
  final user = FirebaseAuth.instance.currentUser;

  // future
  Future getLastEntry<T extends Model>(String collection) async {
    User? user = await FirebaseAuth.instance.currentUser;
    //TODO: needs to be changed but dart can't accept abstract methods for weird reasons
    return (await FirebaseFirestore.instance
            .collection(collection)
            .where('uid', isEqualTo: user?.uid)
            .orderBy("start", descending: false)
            .get())
        .docs
        .map((item) => Model.fromMap<T>(item.data()))
        .toList()
        .last;
  }

  Future<List<Timer>> getAllEntriesBasedOnDate(int numOfDays) async {
    int seconds = numOfDays * 86400;
    User? user = await FirebaseAuth.instance.currentUser;
    return (await FirebaseFirestore.instance
            .collection(collectionName)
            .where('uid', isEqualTo: user?.uid)
            .where('start',
                isGreaterThan: Timestamp(Timestamp.now().seconds - seconds, 0))
            .get())
        .docs
        .map((item) => Timer.fromMap(item.data()))
        .toList();
  }

  // stream
  Stream<Timer> getLastEntryStream() {
    return (FirebaseFirestore.instance
        .collection(collectionName)
        .where('uid', isEqualTo: user?.uid)
        .orderBy("start", descending: false)
        .snapshots()
        .map((snapshot) {
      return snapshot.docs
          .map((doc) => Timer.fromMap(doc.data()))
          .toList()
          .last;
    }));
  }

  Future addEntryWithAutogeneratedId(Timer dataModel) async {
    var docID = await FirebaseFirestore.instance
        //   .collection(dataModel.toString().toLowerCase())
        .collection(collectionName)
        .doc()
        .id;
    dataModel = dataModel.copyWith(uid: user?.uid);
    dataModel = dataModel.copyWith(id: docID);
    print(dataModel);
    final x = (await FirebaseFirestore.instance
        // .collection(dataModel.toString().toLowerCase())
        .collection(collectionName)
        .add(dataModel.toMap()));
    // (await FirebaseFirestore.instance
    //     .collection(dataModel.runtimeType.toString().toLowerCase())
    //     .doc(docID)
    //     .set(data!));
  }

  Future updateEntryWithId(Timer dataModel) async {
    print(dataModel);
    var _querySnapshot = await FirebaseFirestore.instance
        .collection(collectionName)
        .where("id", isEqualTo: dataModel.id)
        .get();
    if (_querySnapshot.docs.isNotEmpty)
      await _querySnapshot.docs[0].reference.update(dataModel.toMap());
  }
}
